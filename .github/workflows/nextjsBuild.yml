name: NextJS Build
on: push

env:
  YARN_MODULES_CACHE_KEY: v1
  YARN_PACKAGE_CACHE_KEY: v1
  YARN_CACHE_FOLDER: .cache/yarn
  FORCE_COLOR: true # display terminal colors

jobs:
  install:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    if: "! contains(toJSON(github.event.head_commit.message), '[skip ci]')" # skip job if git message contains [skip ci]
    steps:
      - uses: actions/checkout@v2

      - name: Cache node modules
        uses: actions/cache@v2
        env:
          cache-name: cache-node-modules
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/yarn.lock') }}
          restore-keys: ${{ runner.os }}-build-${{ env.cache-name }}-

      - name: Install npm dependencies
        run: yarn install

  lint:
    needs: install
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v2

      - name: Cache node modules
        uses: actions/cache@v2
        env:
          cache-name: cache-node-modules
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/yarn.lock') }}
          restore-keys: ${{ runner.os }}-build-${{ env.cache-name }}-

      - name: Lint project
        run: yarn lint

  test:
    needs: install
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v2

      - name: Cache node modules
        uses: actions/cache@v2
        env:
          cache-name: cache-node-modules
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/yarn.lock') }}
            ${{ runner.os }}-build-${{ env.cache-name }}-

      - name: Test project
        run: yarn test --maxWorkers=2 --ci --coverage

      - name: Archive test results
        uses: actions/upload-artifact@v1
        with:
          name: test-results
          path: test-results/test-report.html

      - name: Archive code coverage
        uses: actions/upload-artifact@v1
        with:
          name: code-coverage
          path: test-results/coverage/lcov-report/

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v1.0.7
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: test-results/coverage/lcov.info

  build:
    needs: install
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Cache node modules
        uses: actions/cache@v2
        env:
          cache-name: cache-node-modules
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/yarn.lock') }}
          restore-keys: ${{ runner.os }}-build-${{ env.cache-name }}-

      # - name: Generate .ENV file
      #   run: |
      #     printf 'BUILD_VERSION=%s\n' $(echo ${{ github.sha }} | cut -c -7) >> .env
      #     printf 'API_KEY=%s\n' '${{ secrets.API_KEY }}' >> .env
      #     printf 'DEV_API_KEY=%s\n' '${{ secrets.DEV_API_KEY }}' >> .env

      - name: Update semantic-version in package.json
        # NOTE: this will run successfully on master branch. on any other branch it will use the current npm version
        # run semantic-version in dry-run mode
        # extract string that starts with "Release note"
        # extract version number
        # update version using "npm version"
        run: |
          yarn semantic-release -d | grep 'Release note' | grep -Po "(\d+)\.(\d+)\.(\d+)" | xargs npm version --allow-same-version --no-git-tag-version
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Store next semantic-version to github-action env
        run: |
          node -p "require('./package').version" |  awk '{print "NEXT_VERSION=" $1}' >> $GITHUB_ENV
          echo ${{ env.NEXT_VERSION }}

      - name: Docker login
        run: echo ${{ secrets.GHCR_TOKEN }} | docker login ghcr.io -u $GITHUB_ACTOR --password-stdin

      - name: Build Docker image
        run: |
          docker build -f ./dockerfile .
            --tag ghcr.io/clumsy-coder/uhunt-nextjs:latest 
            --tag ghcr.io/clumsy-coder/uhunt-nextjs:${{ env.NEXT_VERSION }}
          docker images

      - name: Push Docker image
        if: github.ref == 'refs/heads/master'
        run: |
          docker push ghcr.io/clumsy-coder/uhunt-nextjs:latest
          docker push ghcr.io/clumsy-coder/uhunt-nextjs:${{ env.NEXT_VERSION }}

  release:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'
    steps:
      - uses: actions/checkout@v2

      - name: Cache node modules
        uses: actions/cache@v2
        env:
          cache-name: cache-node-modules
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/yarn.lock') }}
          restore-keys: ${{ runner.os }}-build-${{ env.cache-name }}-

      - name: semantic-release
        if: github.ref == 'refs/heads/master'
        run: yarn semantic-release --dry-run ${{github.ref != 'refs/heads/master'}} --ci ${{github.ref == 'refs/heads/master'}}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
