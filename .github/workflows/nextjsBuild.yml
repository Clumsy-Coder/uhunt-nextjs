name: NextJS Build
on: push

env:
  YARN_MODULES_CACHE_KEY: v1
  YARN_PACKAGE_CACHE_KEY: v1
  YARN_CACHE_FOLDER: .cache/yarn
  FORCE_COLOR: true # display terminal colors
  APP_NAME: uhunt-nextjs
  HEROKU_REGISTRY: registry.heroku.com
  HEROKU_REGISTRY_IMAGE: registry.heroku.com/uhunt-nextjs/web
  GHCR_IMAGE: ghcr.io/clumsy-coder/uhunt-nextjs

jobs:
  install:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    if: "! contains(toJSON(github.event.head_commit.message), '[skip ci]')" # skip job if git message contains [skip ci]
    steps:
      - uses: actions/checkout@v2

      - name: Cache node modules
        uses: actions/cache@v2
        env:
          cache-name: cache-node-modules
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/yarn.lock') }}
          restore-keys: ${{ runner.os }}-build-${{ env.cache-name }}-

      - name: Install npm dependencies
        run: yarn install

  lint:
    needs: install
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v2

      - name: Cache node modules
        uses: actions/cache@v2
        env:
          cache-name: cache-node-modules
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/yarn.lock') }}
          restore-keys: ${{ runner.os }}-build-${{ env.cache-name }}-

      - name: Lint project
        run: yarn lint

  test:
    needs: install
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v2

      - name: Cache node modules
        uses: actions/cache@v2
        env:
          cache-name: cache-node-modules
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/yarn.lock') }}
            ${{ runner.os }}-build-${{ env.cache-name }}-

      - name: Test project
        run: yarn test --maxWorkers=2 --ci --coverage

      - name: Archive test results
        uses: actions/upload-artifact@v1
        with:
          name: test-results
          path: test-results/test-report.html

      - name: Archive code coverage
        uses: actions/upload-artifact@v1
        with:
          name: code-coverage
          path: test-results/coverage/lcov-report/

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v1.0.7
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: test-results/coverage/lcov.info

  build:
    needs: install
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Cache node modules
        uses: actions/cache@v2
        env:
          cache-name: cache-node-modules
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/yarn.lock') }}
          restore-keys: ${{ runner.os }}-build-${{ env.cache-name }}-

      - name: Update semantic-version in package.json and store as ENV
        # NOTE: this will run successfully on master branch. on any other branch it will use the current npm version
        # run semantic-version in dry-run mode
        # extract string that starts with "Release note"
        # extract version number
        # update version using "npm version"

        # also store the updated version as an ENV variable
        run: |
          yarn semantic-release -d | grep 'Release note' | grep -Po "(\d+)\.(\d+)\.(\d+)" | xargs npm version --allow-same-version --no-git-tag-version
          node -p "require('./package').version" |  awk '{print "NEXT_VERSION=" $1}' >> $GITHUB_ENV
          echo ${{ env.NEXT_VERSION }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # - name: Docker login
      #   run: echo ${{ secrets.GHCR_TOKEN }} | docker login ghcr.io -u $GITHUB_ACTOR --password-stdin

      # - name: Build Docker image
      #   run: |
      #     docker build \
      #       --tag ghcr.io/clumsy-coder/uhunt-nextjs:latest \
      #       --tag ghcr.io/clumsy-coder/uhunt-nextjs:${{ env.NEXT_VERSION }} \
      #       -f ./dockerfile .

      # - name: Display docker images
      #   run: docker images

      # - name: Push Docker image
      #   if: github.ref == 'refs/heads/master'
      #   run: |
      #     docker push ghcr.io/clumsy-coder/uhunt-nextjs:latest
      #     docker push ghcr.io/clumsy-coder/uhunt-nextjs:${{ env.NEXT_VERSION }}

      # https://geoffhudik.com/tech/2020/09/29/trying-github-container-registry-using-github-actions/
      - name: Set Environment Variables
        run: |
          echo "BUILD_DATE=$(date +'%Y-%m-%d %H:%M:%S')" >> $GITHUB_ENV
          echo "GIT_SHA=$(echo ${{ github.sha }} | cut -c1-7)" >> $GITHUB_ENV
          echo "GIT_REF=$(git symbolic-ref -q --short HEAD || git describe --tags --exact-match)" >> $GITHUB_ENV

      - name: Generate .ENV file
        run: |
          printf 'NEXT_PUBLIC_BUILD_VERSION=%s\n' $(echo ${{ github.sha }} | cut -c -7) >> .env.local
          printf 'NEXT_PUBLIC_VERSION=%s\n' '${{ env.NEXT_VERSION }}' >> .env.local

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Login to Github Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: Build Docker images
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./dockerfile
          pull: true
          load: true
          tags: |
            ${{ env.GHCR_IMAGE }}:latest
            ${{ env.GHCR_IMAGE }}:${{ env.NEXT_VERSION }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache,mode=max
          labels: |
            org.opencontainers.image.authors=${{ github.repository_owner }}
            org.opencontainers.image.created=${{ env.BUILD_DATE }}
            org.opencontainers.image.description=Created from commit ${{ env.GIT_SHA }} and ref ${{ env.GIT_REF }}
            org.opencontainers.image.ref.name=${{ env.GIT_REF }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.source=https://github.com/${{ github.repository }}
            org.opencontainers.image.version=${{ env.NEXT_VERSION }}

      - name: Push Docker images to GitHub Container Registry
        # if: github.ref == 'refs/heads/master'
        run: |
          docker push ${{ env.GHCR_IMAGE }}:latest
          docker push ${{ env.GHCR_IMAGE }}:${{ env.NEXT_VERSION }}

  release:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'
    steps:
      - uses: actions/checkout@v2

      - name: Cache node modules
        uses: actions/cache@v2
        env:
          cache-name: cache-node-modules
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/yarn.lock') }}
          restore-keys: ${{ runner.os }}-build-${{ env.cache-name }}-

      - name: Login to Github Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: Pull Docker image from GitHub Container Registry
        run: docker pull ${{ env.GHCR_IMAGE }}:latest

      - name: Tag Docker image to Heroku Container Registry
        run: docker tag ${{ env.GHCR_IMAGE }}:latest ${{ env.HEROKU_REGISTRY_IMAGE }}:latest

      - name: Login to Heroku Container registry
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_AUTH_TOKEN }}
        run: heroku container:login

      - name: Push Docker images to Heroku Container Registry
        run: docker push ${{ env.HEROKU_REGISTRY_IMAGE }}:latest

      - name: Release
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_AUTH_TOKEN }}
        run: heroku container:release -a ${{ env.APP_NAME }} web

      - name: semantic-release
        if: github.ref == 'refs/heads/master'
        run: yarn semantic-release --dry-run ${{github.ref != 'refs/heads/master'}} --ci ${{github.ref == 'refs/heads/master'}}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
